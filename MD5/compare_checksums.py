#! /usr/bin/python3

# Compare two files containing hashes and filenames, usually to compare two different
# snapshots of the same folder, e.g. a NAS.
# Both files are expected to be generated by md5sum or md5 -r.
# The input file is opened in encoding UTF-8 first, expecting that it was created with md5sum on UNIX.
# If that fails, the file is opened in encoding Latin-1 (ISO-8859-15) instead, as if created with
# MD5Summer on Windows.
#

import sys,re,os.path

result = {}

new_files = {}
rem_files = {}

def print_usage_and_die():
	print('Error: Invalid number of arguments.')
	print('Usage: {} <left_file> <right_file>'.format(sys.argv[0]))
	sys.exit()

# Return tuple consisting of hash and filename, or None
def split_hash_filename(line):
    pattern = re.compile("([0-9a-f]{32})(\s+\**)(.*)")
    m = re.search(pattern, line)
    if m:
        d = dict()
        d['hash'] = m.group(1)
        d['file'] = m.group(3)
        return d

def read_file(filename, pos):

    with open(filename, encoding='utf-8') as in_f:

    	# Validate pos
    	if ((pos != "left") and (pos != "right")):
    		return

    	lines = in_f.read().splitlines()
    	for line in lines:
            m = split_hash_filename(line)
            if m:
                m_hash = m['hash']
                m_file = m['file']

                if not m_hash in result:
    				# First file with this hash, create empty entry
                    result[m_hash] = {"left" : [], "right" : []}

                result[m_hash][pos].append(m_file)

def analyse_results():
	for m_hash in result:
		v = result[m_hash]

		if((len(v["left"]) == 0) and len(v["right"]) > 0):
			print("New files:")
			if not m_hash in new_files:
				new_files[m_hash] = []
			for f in v["right"]:
				print("  {}".format(f))
				new_files[m_hash].append(f)
		elif((len(v["right"]) == 0) and len(v["left"]) > 0):
			print("Removed files:")
			if not m_hash in rem_files:
				rem_files[m_hash] = []
			for f in v["left"]:
				print("  {}".format(f))
				rem_files[m_hash].append(f)
		elif((len(v["right"]) > 0) and len(v["left"]) > 0):
			print("Identical files:")
			for f in v["left"]:
				print("  {}".format(f))
		else:
			print("Error")

	print("\nNew files:\n")
	for m_hash in new_files:
		for f in new_files[m_hash]:
			print("{} {}".format(m_hash, f))

	print("\nRemoved files:\n")
	for m_hash in rem_files:
		for f in rem_files[m_hash]:
			print("{} {}".format(m_hash, f))

	print("\nStatistics\n")
	print("  New files: {}\n".format(len(new_files)))
	print("  Removed files: {}\n".format(len(rem_files)))

if __name__ == '__main__':
	if len(sys.argv) != 3:
		print_usage_and_die()

	l_file = sys.argv[1];
	r_file = sys.argv[2];

	read_file(l_file, "left")
	read_file(r_file, "right")

	analyse_results()
